generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String
  surname           String
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  accounts          Account[]
  sessions          Session[]
  role              Role
  Class             Class[]
  Comment           Comment[]
  StudentsInClasses StudentsInClasses[]
}

enum Role {
  STUDENT
  TEACHER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id                Int                 @id @default(autoincrement())
  name              String
  idTeacher         String
  teacher           User                @relation(fields: [idTeacher], references: [id])
  Post              Post[]
  StudentsInClasses StudentsInClasses[]
  color             String?
  hash              String              @unique

  @@unique([name, idTeacher])
}

model Post {
  id             Int              @id @default(autoincrement())
  content        String
  idClass        Int
  class          Class            @relation(fields: [idClass], references: [id])
  createdAt      DateTime
  Comment        Comment[]
  PostAttachment PostAttachment[]

  @@unique([content, createdAt])
}

model PostAttachment {
  id     Int    @id @default(autoincrement())
  url    String
  name String
  publicId String @unique
  idPost Int
  post   Post   @relation(fields: [idPost], references: [id], onDelete: Cascade ) 
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime
  idPost    Int
  post      Post     @relation(fields: [idPost], references: [id], onDelete: Cascade)
  idUser    String
  user      User     @relation(fields: [idUser], references: [id])

  @@unique([idUser, createdAt])
}

model StudentsInClasses {
  id        Int    @id @default(autoincrement())
  idStudent String
  student   User   @relation(fields: [idStudent], references: [id])
  idClass   Int
  class     Class  @relation(fields: [idClass], references: [id])

  @@unique([idStudent, idClass])
}
